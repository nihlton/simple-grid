$textBreaks: (small: '16px', medium: '16px', large: '16px');
$breaks: (small: '0em', medium: '40em', large: '64em');
$gutters: (no: '.001px', medium: '.5rem', large: '1.5rem');
$cell-padding: 1em;

html, body {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html * { box-sizing: inherit; }
body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; }

.container {
  padding: 2rem;
  margin: 0 auto;
  max-width: 100%;
  width: 60rem
}

.row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  margin: 0;
  padding: 0;
}

.row > * { 
  flex-grow: 0;
  flex-shrink: 0;
  flex: 1;
  padding: #{$cell-padding}; 
}

.row > hr {
  margin: .5rem;
  flex-basis: 100%;
  padding: 0;
  margin-top: -.5px;
  margin-bottom: -.5px;
}

.row > hr.vertical {
  margin: .5rem;
  flex-basis: 0px;
  height: auto;
  border-left: 1px solid #FFA6DE;
  max-width: 0px;
  margin-left: -.5px;
  margin-right: -.5px;
}


@media (max-width: #{map-get($breaks, medium)}) {
  .show-for-medium { display: none }
  .show-for-large { display: none }
  .hide-for-small { display: none }
}

@media (min-width: #{map-get($breaks, medium)}) and (max-width: #{map-get($breaks, large)}) {
  .show-for-small { display: none }
  .show-for-large { display: none }
  .hide-for-medium { display: none }
}

@media (min-width: #{map-get($breaks, large)}) {
  .show-for-small { display: none }
  .show-for-medium { display: none }
  .hide-for-large { display: none }
}

@each $sName, $sValue in $breaks {
  @media (min-width:  #{$sValue}) {
    html { font-size: #{map-get($textBreaks, $sName)}}
    @for $i from 1 through 12 { .order-#{$sName}-#{$i} { order: #{ $i }; }}
    .row {
      margin: 0 calc( -1 * #{map-get($gutters, medium)});
      
      &> *, &> .row {margin: #{map-get($gutters, medium)};}
      &> .row:not(.no-padding) { padding: #{map-get($gutters, medium)}; }
      .no-padding { margin: calc( -1 * (#{map-get($gutters, medium)} + #{$cell-padding})); }
      @for $i from 1 through 12 {
        &> .#{$sName}-#{$i} {
          flex-basis: calc( #{( $i / 12 )*100}% - ( #{map-get($gutters, medium)} * 2));
          max-width: calc( #{( $i / 12 )*100}% - ( #{map-get($gutters, medium)} * 2));
        }
      }
      @for $i from 1 through 12 {
        &> .#{$sName}-#{$i}.no-padding { 
          margin: calc(( -1 * ( #{$cell-padding} )) );
          flex-basis:  calc( #{( $i / 12 )*100}% + calc( #{$cell-padding} * 2));
          max-width: calc( #{( $i / 12 )*100}% + calc( #{$cell-padding} * 2) );
        }
      }
      @for $i from 0 through 12 { 
        &> .offset-#{$sName}-#{$i} { margin-left:  calc((( #{$i} / 12 )*100%) + #{map-get($gutters, medium)} ); }
      }
    }
    @each $gName, $gValue in $gutters {
      .row.#{$gName}-gutter {
         @if $gName != 'medium' {
          margin: 0 calc( -1 * #{$gValue});
          &> hr { margin: #{$gValue}; margin-top: -.5px; margin-bottom: -.5px;}
          &> hr.vertical { margin: #{$gValue}; margin-left: -.5px; margin-right: -.5px;}
          &> *, &> .row {margin: #{$gValue};}
          &> .row:not(.no-padding) {padding: #{$gValue}; }
          .no-padding { margin: calc( -1 * (#{$gValue} + #{$cell-padding})); }
          @for $i from 1 through 12 {
            &> .#{$sName}-#{$i} {
              flex-basis: calc( #{($i/12)*100}% - ( #{$gValue} * 2));
              max-width: calc( #{($i/12)*100}% - ( #{$gValue} * 2));
            }
          }
          @for $i from 1 through 12 {
            &> .#{$sName}-#{$i}.no-padding { 
              margin: calc(( -1 * (#{$cell-padding})) );
              flex-basis: calc( #{($i/12)*100}% + ( #{$cell-padding} * 2) );
              max-width: calc( #{($i/12)*100}% + ( #{$cell-padding} * 2) );
            }
          }
          @for $i from 0 through 12 { 
            &> .offset-#{$sName}-#{$i} { margin-left:  calc((( #{$i} / 12 )*100%) + #{$gValue} ); }
          }
        }
      }
    }
  }
}